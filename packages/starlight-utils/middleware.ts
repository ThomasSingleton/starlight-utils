import { defineRouteMiddleware } from "@astrojs/starlight/route-data";
import { AstroError } from "astro/errors";
import config from "virtual:starlight-utils/config";

export const onRequest = defineRouteMiddleware((context) => {
  context.locals.starlightUtils = {};
  const sidebarLabel = config?.navLinks?.leading?.useSidebarLabelled;

  if (!sidebarLabel) {
    throw new AstroError(
      `No sidebar label was specified for the ${JSON.stringify(config?.navLinks?.leading)} entry in the Astro config.`
    );
  }

  // Extract the navigation links
  if (config?.navLinks?.leading) {
    const sidebarData = context.locals.starlightRoute.sidebar;
    const navLinks: typeof sidebarData = [];
    const sidebar: typeof sidebarData = [];

    sidebarData.forEach((entry) => {
      const condition =
        entry.label === config?.navLinks?.leading?.useSidebarLabelled;
      condition ? navLinks.push(entry) : sidebar.push(entry);
    });

    if (navLinks.length != 1 || !navLinks[0]) {
      throw new AstroError(
        `Could not find the sidebar labelled \`${sidebarLabel}\` that was referenced in the Starlight Utils config.`
      );
    }

    if (navLinks[0].type !== "group") {
      throw new AstroError(
        `\`${navLinks[0].label}\` cannot be used with multi-sidebar.
    
      The sidebar entry specified in the Astro config must be either a group or autogenerated.
    
      See https://starlight.astro.build/guides/sidebar/#groups and https://starlight.astro.build/guides/sidebar/#autogenerated-groups for more details.`
      );
    }

    if (navLinks[0].entries.some((entry) => entry.type !== "link")) {
      throw new AstroError(
        `Only links can be specified for nav links. No groups or autogenerated types are allowed.`
      );
    }

    // Set the value
    context.locals.starlightUtils.navLinks = [...navLinks[0].entries];
    // Remove from the original object
    context.locals.starlightRoute.sidebar = sidebar;
  }
});
